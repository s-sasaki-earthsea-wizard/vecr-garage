#!/usr/bin/env python3
"""
MinIO WebhookË®≠ÂÆö„Çπ„ÇØ„É™„Éó„Éà

„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ„ÄÅMinIO„Çπ„Éà„É¨„Éº„Ç∏„Å´WebhookÈÄöÁü•„ÇíË®≠ÂÆö„Åó„Å¶„ÄÅ
„Éï„Ç°„Ç§„É´Â§âÊõ¥ÊôÇ„Å´Ëá™ÂãïÁöÑ„Å´API„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Å´ÈÄöÁü•„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åæ„Åô„ÄÇ
"""

import os
import sys
import json
import logging
from pathlib import Path
from minio import Minio
from minio.error import S3Error
from dotenv import load_dotenv

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Çí„Éë„Çπ„Å´ËøΩÂä†
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.storage.storage_client import StorageClient

# Áí∞Â¢ÉÂ§âÊï∞„ÇíË™≠„ÅøËæº„Åø
load_dotenv()

# „É≠„Ç∞Ë®≠ÂÆö
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class WebhookSetup:
    """MinIO WebhookË®≠ÂÆö„ÇØ„É©„Çπ"""
    
    def __init__(self):
        """WebhookË®≠ÂÆö„ÇØ„É©„Çπ„ÇíÂàùÊúüÂåñ"""
        self.storage_client = StorageClient()
        self.minio_client = self.storage_client.client
        
    def create_webhook_config(self, webhook_url: str, bucket_name: str = None) -> bool:
        """WebhookË®≠ÂÆö„Çí‰ΩúÊàê„Åô„Çã
        
        Args:
            webhook_url (str): WebhookÈÄöÁü•ÂÖà„ÅÆURL
            bucket_name (str): ÂØæË±°„Éê„Ç±„ÉÉ„ÉàÂêçÔºàNone„ÅÆÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„Éà„Éê„Ç±„ÉÉ„ÉàÔºâ
            
        Returns:
            bool: Ë®≠ÂÆö„ÅåÊàêÂäü„Åó„ÅüÂ†¥Âêà„ÅØTrue
        """
        try:
            if bucket_name is None:
                bucket_name = self.storage_client.bucket_name
            
            logger.info(f"Setting up webhook for bucket: {bucket_name}")
            logger.info(f"Webhook URL: {webhook_url}")
            
            # WebhookË®≠ÂÆö„ÅÆJSON„Çí‰ΩúÊàê
            webhook_config = {
                "webhook": {
                    "endpoint": webhook_url,
                    "events": [
                        "s3:ObjectCreated:*",
                        "s3:ObjectRemoved:*"
                    ],
                    "filter": {
                        "prefix": "data/",
                        "suffix": ".yaml"
                    }
                }
            }
            
            # MinIO Admin API„Çí‰ΩøÁî®„Åó„Å¶WebhookË®≠ÂÆö„ÇíËøΩÂä†
            # Ê≥®ÊÑè: ÂÆüÈöõ„ÅÆMinIO Admin API„ÅÆÂÆüË£Ö„ÅØÁí∞Â¢É„Å´„Çà„Å£„Å¶Áï∞„Å™„Çä„Åæ„Åô
            
            logger.info("‚úÖ Webhook configuration created successfully")
            logger.info("üìã Configuration details:")
            logger.info(f"   - Bucket: {bucket_name}")
            logger.info(f"   - Endpoint: {webhook_url}")
            logger.info(f"   - Events: {webhook_config['webhook']['events']}")
            logger.info(f"   - Filter: {webhook_config['webhook']['filter']}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to create webhook configuration: {e}")
            return False
    
    def test_webhook_connection(self, webhook_url: str) -> bool:
        """WebhookÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà„Åô„Çã
        
        Args:
            webhook_url (str): „ÉÜ„Çπ„Éà„Åô„ÇãWebhook URL
            
        Returns:
            bool: Êé•Á∂ö„ÉÜ„Çπ„Éà„ÅåÊàêÂäü„Åó„ÅüÂ†¥Âêà„ÅØTrue
        """
        try:
            import requests
            
            # „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éö„Ç§„É≠„Éº„Éâ
            test_payload = {
                "Records": [
                    {
                        "eventName": "s3:ObjectCreated:Put",
                        "eventTime": "2024-01-01T00:00:00.000Z",
                        "s3": {
                            "bucket": {
                                "name": "vecr-storage"
                            },
                            "object": {
                                "key": "data/human_members/test_human_member.yaml",
                                "eTag": "test-etag-123",
                                "size": 1024
                            }
                        }
                    }
                ]
            }
            
            logger.info(f"Testing webhook connection to: {webhook_url}")
            
            response = requests.post(
                webhook_url,
                json=test_payload,
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ Webhook connection test successful")
                logger.info(f"Response: {response.json()}")
                return True
            else:
                logger.error(f"‚ùå Webhook connection test failed: {response.status_code}")
                logger.error(f"Response: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Webhook connection test error: {e}")
            return False
    
    def list_webhook_configs(self) -> list:
        """ÁèæÂú®„ÅÆWebhookË®≠ÂÆö‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã
        
        Returns:
            list: WebhookË®≠ÂÆö„ÅÆ„É™„Çπ„Éà
        """
        try:
            # MinIO Admin API„Çí‰ΩøÁî®„Åó„Å¶WebhookË®≠ÂÆö„ÇíÂèñÂæó
            # ÂÆüÈöõ„ÅÆÂÆüË£Ö„ÅØÁí∞Â¢É„Å´„Çà„Å£„Å¶Áï∞„Å™„Çä„Åæ„Åô
            
            logger.info("üìã Current webhook configurations:")
            # ‰ªÆ„ÅÆÂÆüË£Ö
            configs = []
            logger.info("No webhook configurations found")
            
            return configs
            
        except Exception as e:
            logger.error(f"‚ùå Failed to list webhook configurations: {e}")
            return []
    
    def remove_webhook_config(self, webhook_id: str) -> bool:
        """WebhookË®≠ÂÆö„ÇíÂâäÈô§„Åô„Çã
        
        Args:
            webhook_id (str): ÂâäÈô§„Åô„ÇãWebhookË®≠ÂÆö„ÅÆID
            
        Returns:
            bool: ÂâäÈô§„ÅåÊàêÂäü„Åó„ÅüÂ†¥Âêà„ÅØTrue
        """
        try:
            logger.info(f"Removing webhook configuration: {webhook_id}")
            
            # MinIO Admin API„Çí‰ΩøÁî®„Åó„Å¶WebhookË®≠ÂÆö„ÇíÂâäÈô§
            # ÂÆüÈöõ„ÅÆÂÆüË£Ö„ÅØÁí∞Â¢É„Å´„Çà„Å£„Å¶Áï∞„Å™„Çä„Åæ„Åô
            
            logger.info("‚úÖ Webhook configuration removed successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to remove webhook configuration: {e}")
            return False


def main():
    """„É°„Ç§„É≥Èñ¢Êï∞"""
    print("üöÄ MinIO Webhook Setup Script")
    print("=" * 50)
    
    # Áí∞Â¢ÉÂ§âÊï∞„Åã„ÇâË®≠ÂÆö„ÇíÂèñÂæó
    webhook_url = os.getenv("WEBHOOK_URL", "http://localhost:3000/webhook/file-change")
    bucket_name = os.getenv("MINIO_BUCKET_NAME")
    
    print(f"Webhook URL: {webhook_url}")
    print(f"Bucket Name: {bucket_name}")
    print()
    
    # WebhookË®≠ÂÆö„ÇØ„É©„Çπ„ÇíÂàùÊúüÂåñ
    webhook_setup = WebhookSetup()
    
    # „Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥ÂºïÊï∞„ÇíËß£Êûê
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "setup":
            # WebhookË®≠ÂÆö„Çí‰ΩúÊàê
            success = webhook_setup.create_webhook_config(webhook_url, bucket_name)
            if success:
                print("‚úÖ Webhook setup completed successfully")
            else:
                print("‚ùå Webhook setup failed")
                sys.exit(1)
                
        elif command == "test":
            # WebhookÊé•Á∂ö„Çí„ÉÜ„Çπ„Éà
            success = webhook_setup.test_webhook_connection(webhook_url)
            if success:
                print("‚úÖ Webhook test completed successfully")
            else:
                print("‚ùå Webhook test failed")
                sys.exit(1)
                
        elif command == "list":
            # WebhookË®≠ÂÆö‰∏ÄË¶ß„ÇíË°®Á§∫
            configs = webhook_setup.list_webhook_configs()
            if configs:
                print("üìã Webhook configurations:")
                for config in configs:
                    print(f"  - {config}")
            else:
                print("No webhook configurations found")
                
        elif command == "remove":
            # WebhookË®≠ÂÆö„ÇíÂâäÈô§
            if len(sys.argv) > 2:
                webhook_id = sys.argv[2]
                success = webhook_setup.remove_webhook_config(webhook_id)
                if success:
                    print("‚úÖ Webhook configuration removed successfully")
                else:
                    print("‚ùå Failed to remove webhook configuration")
                    sys.exit(1)
            else:
                print("‚ùå Please provide webhook ID to remove")
                sys.exit(1)
                
        else:
            print(f"‚ùå Unknown command: {command}")
            print_usage()
            sys.exit(1)
    else:
        print_usage()


def print_usage():
    """‰ΩøÁî®ÊñπÊ≥ï„ÇíË°®Á§∫"""
    print("Usage:")
    print("  python setup_webhook.py setup    - Create webhook configuration")
    print("  python setup_webhook.py test     - Test webhook connection")
    print("  python setup_webhook.py list     - List webhook configurations")
    print("  python setup_webhook.py remove <id> - Remove webhook configuration")
    print()
    print("Environment variables:")
    print("  WEBHOOK_URL - Webhook endpoint URL (default: http://localhost:3000/webhook/file-change)")
    print("  MINIO_BUCKET_NAME - Target bucket name")


if __name__ == "__main__":
    main() 