services:
  backend-db-registration:
    build:
      context: ./backend-db-registration
      dockerfile: Dockerfile
    container_name: ${CONTAINER_NAME}-backend-db-registration
    ports:
      - "${API_PORT}:${API_PORT}"
    volumes:
      - ./backend-db-registration/src:/app/src
      - ./backend-db-registration/tests:/app/tests
    environment:
      - MEMBER_DB_HOST=db-member
      - MEMBER_DB_PORT=${MEMBER_DB_PORT}
      - MEMBER_DB_USER=${MEMBER_DB_USER}
      - MEMBER_DB_PASSWORD=${MEMBER_DB_PASSWORD}
      - MEMBER_DB_NAME=${MEMBER_DB_NAME}
      - STORAGE_HOST=storage
      - STORAGE_PORT=${STORAGE_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - USE_S3=false
      - DYNAMODB_HOST=db-chat-log
      - DYNAMODB_PORT=${DYNAMODB_PORT}
      # APIË®≠ÂÆö
      - API_HOST=${API_HOST}
      - API_PORT=${API_PORT}
      - API_BASE_URL=${API_BASE_URL}
      # WebhookË®≠ÂÆö
      - WEBHOOK_ENABLED=true
      - WEBHOOK_ENDPOINT=/webhook/file-change
      - WEBHOOK_EVENTS=s3:ObjectCreated:*,s3:ObjectRemoved:*
      - WEBHOOK_FILTER_PREFIX=data/
      - WEBHOOK_FILTER_SUFFIX=.yaml,.yml
      - WEBHOOK_ETAG_CHECK_ENABLED=${WEBHOOK_ETAG_CHECK_ENABLED}
      # TODO: Â∞ÜÊù•ÁöÑ„Å´WebhookË™çË®º„ÇíÂÆüË£Ö‰∫àÂÆöÔºàÁèæÂú®„ÅØÊú™‰ΩøÁî®Ôºâ
      # - WEBHOOK_AUTH_TOKEN=${WEBHOOK_AUTH_TOKEN:-}
      - WEBHOOK_FULL_URL=${WEBHOOK_FULL_URL}
      # „Çµ„Éº„Éê„ÉºË®≠ÂÆö
      - HOST=${API_HOST}
      - PORT=${API_PORT}
    depends_on:
      db-member:
        condition: service_healthy
      db-chat-log:
        condition: service_healthy
    networks:
      - network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${API_PORT}/health/storage-monitor/ready"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend-llm-response:
    build:
      context: ./backend-llm-response
      dockerfile: Dockerfile
    container_name: ${CONTAINER_NAME}-backend-llm-response
    ports:
      - "${LLM_PORT}:${LLM_PORT}"
    volumes:
      - ./backend-llm-response/:/app/
      - ./config/discord_tokens.json:/app/config/discord_tokens.json:ro
    environment:
      - MEMBER_DB_HOST=db-member
      - MEMBER_DB_PORT=${MEMBER_DB_PORT}
      - MEMBER_DB_USER=${MEMBER_DB_USER}
      - MEMBER_DB_PASSWORD=${MEMBER_DB_PASSWORD}
      - MEMBER_DB_NAME=${MEMBER_DB_NAME}
      # LLMË®≠ÂÆö
      - LLM_HOST=${LLM_HOST}
      - LLM_PORT=${LLM_PORT}
      - LLM_BASE_URL=${LLM_BASE_URL}
      # Discord WebhookË®≠ÂÆö
      - DISCORD_WEBHOOKS=${DISCORD_WEBHOOKS}
      # Discord BotË®≠ÂÆö
      - DISCORD_BOT_NAME=${DISCORD_BOT_NAME:-ü§ñüç°ËèØÊâá}
      # Times Mode „ÉÜ„Çπ„ÉàË®≠ÂÆöÔºà„ÉÜ„Çπ„ÉàÊôÇ„ÅÆ„ÅøÊúâÂäπÂåñÔºâ
      - TIMES_TEST_MODE=${TIMES_TEST_MODE:-false}
      - TIMES_TEST_INTERVAL=${TIMES_TEST_INTERVAL:-60}
      # Claude APIË®≠ÂÆö
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL}
      - ANTHROPIC_API_VERSION=${ANTHROPIC_API_VERSION}
      - ANTHROPIC_MAX_TOKENS=${ANTHROPIC_MAX_TOKENS}
    depends_on:
      db-member:
        condition: service_healthy
    networks:
      - network
    restart: unless-stopped

  db-member:
    image: postgres:16
    container_name: ${CONTAINER_NAME}-db-member
    environment:
      - POSTGRES_USER=${MEMBER_DB_USER}
      - POSTGRES_PASSWORD=${MEMBER_DB_PASSWORD}
      - POSTGRES_DB=${MEMBER_DB_NAME}
    volumes:
      - ./db-member/member_db_schema.sql:/docker-entrypoint-initdb.d/db_schema.sql
    ports:
      - "${MEMBER_DB_PORT}:${MEMBER_DB_PORT}"
    networks:
      - network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${MEMBER_DB_USER}", "-d", "${MEMBER_DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  storage:
    image: minio/minio:latest
    container_name: ${CONTAINER_NAME}-storage
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      # WebhookË®≠ÂÆö
      - MINIO_WEBHOOK_ENABLE=true
      - MINIO_WEBHOOK_ENDPOINT=${WEBHOOK_FULL_URL}
      - MINIO_WEBHOOK_EVENTS=s3:ObjectCreated:*,s3:ObjectRemoved:*
      - MINIO_WEBHOOK_FILTER_PREFIX=data/
      - MINIO_WEBHOOK_FILTER_SUFFIX=.yaml,.yml
      # TODO: Â∞ÜÊù•ÁöÑ„Å´WebhookË™çË®º„ÇíÂÆüË£Ö‰∫àÂÆöÔºàÁèæÂú®„ÅØÊú™‰ΩøÁî®Ôºâ
      # - MINIO_WEBHOOK_AUTH_TOKEN=${WEBHOOK_AUTH_TOKEN:-}
      - MINIO_WEBHOOK_QUEUE_LIMIT=1000
    command: server /data --console-address ":${STORAGE_CONSOLE_PORT}"
    ports:
      - "${STORAGE_PORT}:${STORAGE_PORT}"  # API port
      - "${STORAGE_CONSOLE_PORT}:${STORAGE_CONSOLE_PORT}"  # Console port
    volumes:
      - ./storage/data:/data
    networks:
      - network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${STORAGE_PORT}/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
  
  minio-setup:
    image: minio/mc
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - WEBHOOK_FULL_URL=${WEBHOOK_FULL_URL}
      - STORAGE_PORT=${STORAGE_PORT}
    depends_on:
      storage:
        condition: service_healthy
      backend-db-registration:
        condition: service_started
    entrypoint: /scripts/minio-setup.sh
    volumes:
      - ./storage/sample_data:/sample_data
      - ./scripts:/scripts
    networks:
      - network

  minio-restarter:
    image: docker:dind
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: docker restart vecr-garage-storage
    depends_on:
      minio-setup:
        condition: service_completed_successfully
    networks:
      - network

  webhook-configurator:
    image: minio/mc
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - STORAGE_PORT=${STORAGE_PORT}
      - WEBHOOK_FULL_URL=${WEBHOOK_FULL_URL}
    depends_on:
      minio-restarter:
        condition: service_completed_successfully
    entrypoint: /scripts/webhook-configurator.sh
    volumes:
      - ./scripts:/scripts
    networks:
      - network

  member-manager:
    build:
      context: ./member-manager
      dockerfile: Dockerfile
    container_name: ${CONTAINER_NAME}-member-manager
    ports:
      - "${MEMBER_MANAGER_PORT}:${MEMBER_MANAGER_PORT}"
    volumes:
      - ./member-manager:/app
    environment:
      - MEMBER_DB_HOST=db-member
      - MEMBER_DB_PORT=${MEMBER_DB_PORT}
      - MEMBER_DB_USER=${MEMBER_DB_USER}
      - MEMBER_DB_PASSWORD=${MEMBER_DB_PASSWORD}
      - MEMBER_DB_NAME=${MEMBER_DB_NAME}
      - STORAGE_HOST=storage
      - STORAGE_PORT=${STORAGE_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      # Member ManagerË®≠ÂÆö
      - MEMBER_MANAGER_HOST=${MEMBER_MANAGER_HOST}
      - MEMBER_MANAGER_PORT=${MEMBER_MANAGER_PORT}
      - MEMBER_MANAGER_BASE_URL=${MEMBER_MANAGER_BASE_URL}
    depends_on:
      db-member:
        condition: service_healthy
      storage:
        condition: service_healthy
    networks:
      - network
    # TODO: Health check is not implemented yet...
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:${MEMBER_MANAGER_PORT}"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

  db-chat-log:
    image: localstack/localstack:latest
    container_name: ${CONTAINER_NAME}-db-chat-log
    ports:
      - "${DYNAMODB_PORT}:${DYNAMODB_PORT}"
    environment:
      - SERVICES=dynamodb
      - DEFAULT_REGION=ap-northeast-1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - DEBUG=1
    volumes:
      - ./db-chat-log:/var/lib/localstack/data
    networks:
      - network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DYNAMODB_PORT}/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  ci-runner:
    build:
      context: ./ci-cd
      dockerfile: Dockerfile
    container_name: ${CONTAINER_NAME}-ci-runner
    volumes:
      - .:/workspace
    working_dir: /workspace
    networks:
      - network
    profiles:
      - ci
    command: /bin/bash

networks:
  network:
    name: ${NETWORK_NAME}
    driver: bridge

volumes:
  data:
    name: ${VOLUME_NAME}
    driver: local

